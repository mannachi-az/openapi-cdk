openapi: 3.0.0
info:
  title: Widgets API
  description: "This is the Widgets API where you can create, find, and update Widgets."
  version: 1.0.3
externalDocs:
  description: Widgets API Git repository
  url: https://gitlab.aws/lppopple/blog/cdk-openapi/widgets-api
servers:
- url: /
tags:
- name: widget
  description: Everything about Widgets
  externalDocs:
    description: Amazon Web Services
    url: http://aws.amazon.com
paths:
  /widgets:
    get:
      tags:
      - widget
      summary: Widget List.
      description: Get list of Widgets.
      operationId: getWidgets
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnyValue'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APILambda.Arn}/invocations"
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
    post:
      tags:
      - widget
      summary: Create Widget.
      description: Create a Widget.
      operationId: createWidget
      requestBody:
        $ref: '#/components/requestBodies/Widget'
      responses:
        "201":
          description: Created
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APILambda.Arn}/invocations"
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
  /widgets/{widgetID}:
    get:
      tags:
      - widget
      summary: Get Widget.
      description: Get a Widget.
      operationId: getWidget
      parameters:
      - name: widgetID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Widget'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APILambda.Arn}/invocations"
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
    put:
      tags:
      - widget
      summary: Update Widget.
      description: Update a Widget.
      operationId: updateWidget
      parameters:
      - name: widgetID
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: number
      requestBody:
        $ref: '#/components/requestBodies/Widget'
      responses:
        "204":
          description: Updated
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APILambda.Arn}/invocations"
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
  /ping:
    get:
      summary: Server heartbeat operation
      description: Ping the service.
      operationId: getPing
      responses:
        "200":
          description: OK
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APILambda.Arn}/invocations"
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
components:
  schemas:
    AnyValue:
      description: "Can be anything: string, number, array, object, etc., including\
        \ `null`"
    Widget:
      required:
      - description
      - id
      - name
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        description:
          type: string
  responses:
    Widgets:
      description: OK
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Widget'
    Widget:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Widget'
    AnyResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AnyValue'
  parameters:
    WidgetID:
      name: widgetID
      in: path
      required: true
      style: simple
      explode: false
      schema:
        type: number
  requestBodies:
    Widget:
      description: Represents a Widget creation.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Widget'
      required: true
